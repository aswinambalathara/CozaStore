
<button data-bs-toggle="modal"
hidden data-bs-target="#editCouponModal" class="btn btn-sm btn-primary" id="editCouponTrigger">Edit coupon Trigger</button>


<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">Edit Coupon</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="d-flex flex-column" id="editCouponForm">
            <div class="mb-2 parent">
              <label for="CouponName" class="form-label">Coupon Name</label>
              <input type="text" style="text-transform: capitalize;" name="couponName" id="editCouponName" class="form-control">
              <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
            </div>
            <div class="mb-2 parent">
              <label for="CouponCode" class="form-label">Coupon Code</label>
              <input type="text" name="couponCode" id="editCouponCode" class="form-control">
              <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
            </div>
            <div class="mb-2 parent">
              <label for="ValidFrom" class="form-label">Valid From</label>
              <input type="date" name="validFrom" id="editValidFrom" class="form-control">
              <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
            </div>
            <div class="mb-2 parent">
              <label for="ValidTo" class="form-label">Valid To</label>
              <input type="date" name="validTo" id="editValidTo" class="form-control">
              <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
            </div>
            <div class="mb-2 parent">
              <label for="ValidFor" class="form-label">Valid For</label>
              <select name="validFor" id="editValidFor" style="text-transform: capitalize;" class="form-select">
                <%categories.forEach(function(category){%>
                  <option value="<%=category._id%>" style="text-transform: capitalize;">
                    <%= category.categoryName%>
                  </option>
                  <%})%>
              </select>
              <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
              <!-- <input type="text" name="validFor" id="validFor" class="form-control"> -->
            </div>
            <div class="mb-2 parent">
              <label for="Discount" class="form-label">Discount</label>
              <input type="text" name="discount" id="editDiscount" class="form-control">
              <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" id="editCouponBtn">Edit Coupon</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    const editCouponName = document.getElementById('editCouponName');
    const editCouponCode = document.getElementById('editCouponCode');
    const editValidFrom = document.getElementById('editValidFrom');
    const editValidTo = document.getElementById('editValidTo');
    const editValidFor = document.getElementById('editValidFor');
    const editDiscount = document.getElementById('editDiscount');
    const editCouponTrigger = document.getElementById('editCouponTrigger');
    const editCouponBtn = document.getElementById('editCouponBtn');

    editCouponName.addEventListener('blur', handleInputChange);
    editCouponCode.addEventListener('blur', handleInputChange);
    editValidFrom.addEventListener('blur', handleInputChange);
    editValidTo.addEventListener('blur', handleInputChange);
    //editValidFor.addEventListener('blur', handleInputChange);
    editDiscount.addEventListener('blur', handleInputChange);
    editCouponBtn.addEventListener('click', handleFormSubmit);


    const editErrorMessages = {
      editCouponName: {
        invalid: "Only letters allowed"
      },
      editCouponCode: {
        invalid: "Must contain atleast 3 uppercase and 3 characters"
      },
      editValidFrom: {
        invalid: "Enter a valid Date"
      },
      editValidTo: {
        invalid: "Select a future date"
      },
      editDiscount: {
        invalid: "Enter valid discount between 1 and 100%"
      },
    }

    function handleInputChange(event) {
      const input = event.target;
      const type = input.id;
      const value = input.value;
      const errorMessage = validateInputs(input, type, value);
      setError(input, errorMessage);
    }

    function validateDate(dateInMs) {
      const parsedDate = new Date(dateInMs);
      parsedDate.setHours(0, 0, 0, 0);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      //console.log(parsedDate,today);
      return { parsedDate, today }
    }

    function validateInputs(input, type, value) {
      let lettersOnlyRegex = /^[A-Za-z\s]*$/;
      let couponRegex = /^[A-Z0-9]{3,}[A-Z0-9_-]*$/
      let dates;
      let discountRegex = /^([1-9]|[1-9][0-9]|100|\d{1,2}\.\d{1,2})$/;
  
      const errorMessage = editErrorMessages[type];

      switch (type) {
        case 'editCouponName':
          if (!lettersOnlyRegex.test(value)) {
            return errorMessage.invalid;
          }
          break;
        case 'editCouponCode':
          if (!couponRegex.test(value)) {
            return errorMessage.invalid
          }
          break;
        case 'editDiscount':
          if (!discountRegex.test(value)) {
            return errorMessage.invalid
          }
          break;
        case 'editValidFrom':
          dates = validateDate(Date.parse(value));
          //console.log(dates);
          if (dates.parsedDate < dates.today) {
            return errorMessage.invalid
          }
          break;
        case 'editValidTo':
          dates = validateDate(Date.parse(value));
          //console.log(dates)
          if (dates.parsedDate <= dates.today) {
            return errorMessage.invalid
          }
          break;
      }
  
      return ''
  
    }

    async function handleFormSubmit(event) {
      const couponId = event.target.getAttribute('data-couponId');
  
      let hasError = false;
      const allInputs = [editCouponName,editCouponCode,editValidTo,editValidFrom,editDiscount];
  
      allInputs.forEach((input) => {
        const type = input.id;
        const value = input.value;
        const errorMessage = validateInputs(input, type, value);
        if (errorMessage) {
          hasError = true
          setError(input, errorMessage);
        } else {
          setError(input, '');
        }
      });
  
      if (!hasError) {
        const couponNameValue = editCouponName.value.trim()
        const couponCodeValue = editCouponCode.value.trim()
        const discountValue = Number(editDiscount.value.trim())
        const url = `/admin/coupons/editcoupon/${couponId}`
        const method = 'PATCH'
        const body = {
          couponName: couponNameValue? couponNameValue.toLowerCase() : undefined,
          couponCode: couponCodeValue? couponCodeValue : undefined,
          validFrom: new Date(editValidFrom.value.trim()),
          validTo: new Date(editValidTo.value.trim()),
          validFor: editValidFor.value,
          discount: discountValue? discountValue : undefined
        }
        const data = await fetchFunction(url, method, body);
        if(data.status === false){
          Swal.fire({
            text: data.message,
            icon: "error"
          });
        }else{
          Swal.fire({
            text: data.message,
            icon: "success"
          }).then(()=>{
            location.reload()
          })
        }
      }
    }


    function setError(element, message) {
      const inputParent = element.closest('.parent');
      const errorDisplay = inputParent.querySelector('.error');
  
      errorDisplay.innerText = message;
    }
  
    async function fetchFunction(url, method, body) {
      const response = await fetch(url, {
        method: method,
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
      })
  
      const data = await response.json()
  
      return data;
    }
  
  </script>