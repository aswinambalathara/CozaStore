<!-- Button trigger modal -->

<!-- Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModal" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Coupon</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex flex-column" id="couponForm">
          <div class="mb-2 parent">
            <label for="CouponName" class="form-label">Coupon Name</label>
            <input type="text" name="couponName" id="couponName" class="form-control">
            <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
          </div>
          <div class="mb-2 parent">
            <label for="CouponCode" class="form-label">Coupon Code</label>
            <input type="text" name="couponCode" id="couponCode" class="form-control">
            <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
          </div>
          <div class="mb-2 parent">
            <label for="ValidFrom" class="form-label">Valid From</label>
            <input type="date" name="validFrom" id="validFrom" class="form-control">
            <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
          </div>
          <div class="mb-2 parent">
            <label for="ValidTo" class="form-label">Valid To</label>
            <input type="date" name="validTo" id="validTo" class="form-control">
            <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
          </div>
          <div class="mb-2 parent">
            <label for="ValidFor" class="form-label">Valid For</label>
            <select name="validFor" id="validFor" style="text-transform: capitalize;" class="form-select">
              <option value="" checked>Choose Category</option>
              <%categories.forEach(function(category){%>
                <option value="<%=category._id%>" style="text-transform: capitalize;">
                  <%= category.categoryName%>
                </option>
                <%})%>
            </select>
            <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
            <!-- <input type="text" name="validFor" id="validFor" class="form-control"> -->
          </div>
          <div class="mb-2 parent">
            <label for="Discount" class="form-label">Discount</label>
            <input type="text" name="discount" id="discount" class="form-control">
            <div class="error mt-1 ms-2" style="color: red;  font-size: small;"></div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="createCouponBtn">Create Coupon</button>
      </div>
    </div>
  </div>
</div>
<%- include('../validations/addCouponVal')%>
<!-- <script>
  const addCouponForm = document.getElementById('couponForm');
  const couponName = document.getElementById('couponName');
  const couponCode = document.getElementById('couponCode');
  const validFrom = document.getElementById('validFrom');
  const validTo = document.getElementById('validTo');
  const validFor = document.getElementById('validFor');
  const discount = document.getElementById('discount');
  const createCouponBtn = document.getElementById('createCouponBtn');

  couponName.addEventListener('blur', handleInputChange);
  couponCode.addEventListener('blur', handleInputChange);
  validFrom.addEventListener('blur', handleInputChange);
  validTo.addEventListener('blur', handleInputChange);
  validFor.addEventListener('blur', handleInputChange);
  discount.addEventListener('blur', handleInputChange);
  createCouponBtn.addEventListener('click', handleFormSubmit);

  const errorMessages = {
    couponName: {
      required: "This field is required",
      invalid: "Only letters allowed"
    },
    couponCode: {
      required: "This field is required",
      invalid: "Must contain atleast 3 uppercase and 3 characters"
    },
    validFrom: {
      required: "This field is required",
      invalid: "Enter a valid Date"
    },
    validTo: {
      required: "This field is required",
      invalid: "Select a future date"
    },
    validFor: {
      required: "This field is required",
    },
    discount: {
      required: "This field is required",
      invalid: "Enter valid discount between 1 and 100%"
    },
  }

  function handleInputChange(event) {
    const input = event.target;
    const type = input.id;
    const value = input.value;
    const errorMessage = validateInputs(input, type, value);
    setError(input, errorMessage);
  }

  function validateInputs(input, type, value) {
    let lettersOnlyRegex = /^[A-Za-z\s]*$/;
    let couponRegex = /^[A-Z0-9]{3,}[A-Z0-9_-]*$/
    let dates;
    let discountRegex = /^([1-9]|[1-9][0-9]|100|\d{1,2}\.\d{1,2})$/;

    const errorMessage = errorMessages[type];

    if (value === '') {
      return errorMessage.required;
    }
    switch (type) {
      case 'couponName':
        if (!lettersOnlyRegex.test(value)) {
          return errorMessage.invalid;
        }
        break;
      case 'couponCode':
        if (!couponRegex.test(value)) {
          return errorMessage.invalid
        }
        break;
      case 'discount':
        if (!discountRegex.test(value)) {
          return errorMessage.invalid
        }
        break;
      case 'validFrom':
        dates = validateDate(Date.parse(value));
        console.log(dates);
        if (dates.parsedDate < dates.today) {
          return errorMessage.invalid
        }
        break;
      case 'validTo':
        dates = validateDate(Date.parse(value));
        console.log(dates)
        if (dates.parsedDate <= dates.today) {
          return errorMessage.invalid
        }
        break;
    }

    return ''

  }

  function validateDate(dateInMs) {
    const parsedDate = new Date(dateInMs);
    parsedDate.setHours(0, 0, 0, 0);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    //console.log(parsedDate,today);
    return { parsedDate, today }
  }

  async function handleFormSubmit(event) {
    event.preventDefault()

    let hasError = false;
    const allInputs = [couponName, couponCode, validFrom, validTo, validFor, discount];

    allInputs.forEach((input) => {
      const type = input.id;
      const value = input.value;
      const errorMessage = validateInputs(input, type, value);
      if (errorMessage) {
        hasError = true
        setError(input, errorMessage);
      } else {
        setError(input, '');
      }
    });

    if (!hasError) {
      const url = '/admin/coupons/addcoupon'
      const method = 'POST'
      const body = {
        couponName: couponName.value.trim(),
        couponCode: couponCode.value.trim(),
        validFrom: new Date(validFrom.value.trim()),
        validTo: new Date(validTo.value.trim()),
        validFor: validFor.value,
        discount: Number(discount.value)
      }
      const data = await fetchFunction(url, method, body);
      if(data.status === false){
        Swal.fire({
          text: data.message,
          icon: "error"
        });
      }else{
        Swal.fire({
          text: data.message,
          icon: "success"
        }).then(()=>{
          location.reload()
        })
      }
    }
  }

  function setError(element, message) {
    const inputParent = element.closest('.parent');
    const errorDisplay = inputParent.querySelector('.error');

    errorDisplay.innerText = message;
  }

  async function fetchFunction(url, method, body) {
    const response = await fetch(url, {
      method: method,
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    })

    const data = await response.json()

    return data;
  }

</script> -->